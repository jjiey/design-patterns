装饰模式：
动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活。

如果只有一个ConcreateComponent类而没有抽象的Component类，那么Decorator类可以是ConcreateComponent的一个字类。同样道理，如果只有一个ConcreateComponent类，那么就没有必要建立一个单独的Decorator类，而可以把Decorator和ConcreateComponent的责任合并成一个类。

四个角色：抽象的实体类，确定的实体类，抽象的装饰者，确定的装饰者
（抽象的煎饼，实体的煎饼，抽象的装饰者，香肠或鸡蛋）
抽象的装饰者 extends 抽象的实体类
抽象的装饰者是否要使用abstract看具体的业务场景，如果它的子类装饰者需要实现一些特定的方法，它就需要用抽象类，否则不用abstract也可以实现功能
装饰顺序很重要

缺点：
会出现更多的代码，更多的类，增加程序复杂性；
动态装饰时，多层装饰会更加复杂